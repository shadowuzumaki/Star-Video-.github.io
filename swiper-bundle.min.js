// Swiper JS - Minimal version for Star Video
class Swiper {
    constructor(container, options = {}) {
        this.container = typeof container === 'string' ? document.querySelector(container) : container;
        this.options = {
            slidesPerView: 1,
            spaceBetween: 0,
            loop: false,
            autoplay: false,
            speed: 300,
            ...options
        };
        
        this.wrapper = this.container.querySelector('.swiper-wrapper');
        this.slides = this.container.querySelectorAll('.swiper-slide');
        this.currentIndex = 0;
        this.isTransitioning = false;
        
        this.init();
    }
    
    init() {
        this.setupSlides();
        this.setupNavigation();
        this.setupAutoplay();
        this.updateSlides();
    }
    
    setupSlides() {
        const slideWidth = 100 / this.options.slidesPerView;
        this.slides.forEach(slide => {
            slide.style.width = `${slideWidth}%`;
            slide.style.flexShrink = '0';
        });
    }
    
    setupNavigation() {
        const nextBtn = this.container.querySelector('.swiper-button-next');
        const prevBtn = this.container.querySelector('.swiper-button-prev');
        
        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.slideNext());
        }
        
        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.slidePrev());
        }
    }
    
    setupAutoplay() {
        if (this.options.autoplay && this.options.autoplay.delay) {
            this.autoplayTimer = setInterval(() => {
                this.slideNext();
            }, this.options.autoplay.delay);
            
            // Pause on hover
            this.container.addEventListener('mouseenter', () => {
                clearInterval(this.autoplayTimer);
            });
            
            this.container.addEventListener('mouseleave', () => {
                this.autoplayTimer = setInterval(() => {
                    this.slideNext();
                }, this.options.autoplay.delay);
            });
        }
    }
    
    slideNext() {
        if (this.isTransitioning) return;
        
        const maxIndex = this.slides.length - this.options.slidesPerView;
        
        if (this.currentIndex < maxIndex) {
            this.currentIndex++;
        } else if (this.options.loop) {
            this.currentIndex = 0;
        }
        
        this.updateSlides();
    }
    
    slidePrev() {
        if (this.isTransitioning) return;
        
        if (this.currentIndex > 0) {
            this.currentIndex--;
        } else if (this.options.loop) {
            this.currentIndex = this.slides.length - this.options.slidesPerView;
        }
        
        this.updateSlides();
    }
    
    slideTo(index) {
        if (this.isTransitioning) return;
        
        this.currentIndex = Math.max(0, Math.min(index, this.slides.length - this.options.slidesPerView));
        this.updateSlides();
    }
    
    updateSlides() {
        this.isTransitioning = true;
        
        const translateX = -(this.currentIndex * (100 / this.options.slidesPerView));
        this.wrapper.style.transform = `translateX(${translateX}%)`;
        this.wrapper.style.transition = `transform ${this.options.speed}ms ease`;
        
        setTimeout(() => {
            this.isTransitioning = false;
        }, this.options.speed);
    }
    
    destroy() {
        if (this.autoplayTimer) {
            clearInterval(this.autoplayTimer);
        }
    }
}

// Export for global use
window.Swiper = Swiper;